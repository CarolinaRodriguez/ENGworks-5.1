requires Task.Selection

REM Constants
Dim Cr = ASCII(13)
Dim Lf = ASCII(10)
Dim CrLf = Cr + Lf
Dim Tab = ASCII(9)
Dim YES = "YES"
Dim NO = "NO"

Dim AUTO = "Auto"
Dim LGDM = "LG DM"
Dim SSD = "SS&D"
Dim SD = "S&D"
Dim TDC = "TDC"
Dim TDF = "TDF"
Dim WIDTH = "Width"
Dim HEIGHT = "Height"
Dim LENGTH = "Length"
Dim DEPTH = "Depth"
Dim OVERRIDE = "Override"
Dim ANGLE = "Angle"
Dim NUMSEGS = "Number Of Segments"
Dim TOPWIDTH = "Top Width"
Dim TWOPARTS = "2 Parts"
Dim BWIDTH = "Branch Width"
Dim BDEPTH = "Branch Depth"
Dim BPARTS = "Branch Parts"
Dim ISHL = "ISHL"
Dim OHL = "OHL"
Dim COLLAR = "COLLAR"
Dim PBORDER = "Plate Border"
Dim DIAM = "Diameter"
Dim EXTN = "Extension"
Dim EXTNIN = EXTN + " In"
Dim EXTNOUT = EXTN + " Out"	
Dim INSIDE = "Inside"

REM Global Variables
Dim ItemHasChanges = False
Dim Coil_Wrap = 60
Dim Coil_L = 120
Dim Cut_Wrap = 50
Dim Cut_L = 60
Dim Ins_Coil_L_Shape = NO
Dim Ins_Cut_L_Shape = YES
Dim TDC_Cut_4_Piece = NO
Dim DimErrorsFound = 0
Dim DimErrorString = ""

REM Logging, Should be commented out for production
Object LogFile
REM Dim LogPath = "C:/Logs/Will.log"
Dim LogOpened = False
Function DoWriteToLog(Str)
	REM If LogOpened Then
		REM If LogFile.IsOpen Then
			REM LogFile.WriteLine(Str)
		REM EndIf
	REM Else
		REM LogFile = New File(LogPath, ForOutput + IsText)
		REM If LogFile.IsOpen Then
			REM LogOpened = True
			REM LogFile.WriteLine(Str)
		REM EndIf
	REM EndIf
End Function
Function WriteToLog(Str)
	DoWriteToLog(cItem.Handle + Tab + cItem.CID + Tab + cItem.Number + Tab + Str)
End Function
Function WriteNonItemToLog(Str)
	DoWriteToLog(Str)
End Function
Function FinishLogging()
	WriteNonItemToLog("Finished!")
	If LogOpened Then
		LogFile.Close()
	EndIf
End Function

REM Shared Functions

Function GetRightValue(Str, Sep)
	If Len(Sep) = 0 Then
		REM If Len Crashes, Sep probably isn't set
		Debug("Seperator cannot be blank")
	EndIf
	Return Trim(Right(Str, Len(Str) - InStr(1, Str, Sep)))
End Function

Function Contains(Str, Val)
	Return InStr(1, Str, Val) > 0
End Function

Dim STRTRead = False
Function ReadSTRT()
	If Not STRTRead Then
		Object STRT = New File("STRT.txt", ForInput + IsText)
		If STRT.IsOpen Then
			Coil_Wrap = GetRightValue(STRT.ReadLine(), "=")
			Coil_L = GetRightValue(STRT.ReadLine(), "=")
			Cut_Wrap = GetRightValue(STRT.ReadLine(), "=")
			Cut_L = GetRightValue(STRT.ReadLine(), "=")
			Ins_Coil_L_Shape = Upper(GetRightValue(STRT.ReadLine(), "="))
			ins_cut_L_shape = Upper(GetRightValue(STRT.ReadLine(), "="))
			TDC_Cut_4_Piece = Upper(GetRightValue(STRT.ReadLine(), "="))
			STRT.Close()
			WriteToLog("ReadSTRT")
		EndIf
		STRTRead = True
	EndIf
End Function

REM Call this whenever an item is changed
Function Chng()
	If Not ItemHasChanges Then
		ItemHasChanges = True
	EndIf
End Function
Function Reset()
	If ItemHasChanges Then
		ItemHasChanges = False
	EndIf
End Function

REM Set specific length/connector matches to auto for the coil
Function SetForCoil(Item)
	If Item.Dim[3].Value <> AUTO Then
		Dim Dim3 = Item.Dim[3].NumValue
		Dim Con1 = Item.Connector[1].Value
		Dim Con2 = Item.Connector[2].Value
		Dim SetToAuto = False
		If Dim3 = 60 Then
			If Con1 = LGDM And Con2 = LGDM Then
				SetToAuto = True
			EndIf
		EndIf
		If Dim3 = 59 Then
			If Con1 = SSD And Con2 = SSD Then
				SetToAuto = True
			EndIf
			If Con1 = SD And Con2 = SD Then
				SetToAuto = True
			EndIf
		EndIf
		If Dim3 = 56.25 Then
			If Con1 = TDC And Con2 = TDC Then
				SetToAuto = True
			EndIf
		EndIf
		If SetToAuto Then
			Item.Dim[3].Value = AUTO
			Chng()
			WriteToLog("SetForCoil SetToAuto")
		EndIf
	EndIf	
End Function

Function StraightType(Item)

	ReadSTRT()
	Dim W = Item.Dim[WIDTH].Value
	Dim D = Item.Dim[DEPTH].Value
	Dim L = Item.Dim[LENGTH].Value
	Dim Half_Periphery = W + D
	Dim Periphery = Half_Periphery * 2
	
	Dim InsStat = Item.Insulation.Status
	
	Dim OnePS = "1 Part Straight"
	Dim TwoXL = "2xL"
	
	Dim OverRideVal = ""
	REM Dim Msg = ""
	
	If L = AUTO Then
		If (Periphery < Coil_Wrap) And Not (InsStat = INSIDE And Ins_Coil_L_Shape = YES) Then
			OverRideVal = OnePS
		ElseIf (Half_Periphery < Coil_L) Or (InsStat = INSIDE And Ins_Coil_L_Shape = YES And Periphery < Coil_Wrap) Then			
			OverRideVal = TwoXL
		REM ElseIf Periphery < Coil_Wrap Then
			REM OverRideVal = OnePS
		Else
			OverRideVal = "4xI,M-F"
		EndIf
		REM Msg = "L: " + L + " | Half_Periphery: " + Half_Periphery + " | Coil_L: " + Coil_L + " | InsStat: " + InsStat + " | Ins_Coil_L_Shape: " + Ins_Coil_L_Shape + " | Periphery: " + Periphery + " | Coil_Wrap: " + Coil_Wrap
	Else
		If Periphery < Cut_Wrap Then
			If InsStat = INSIDE And Ins_Cut_L_Shape = YES Then				
				OverRideVal = TwoXL
			Else			
				OverRideVal = OnePS
			EndIf
		REM Msg = "L: " + L + " | Periphery: " + Periphery + " | Cut_Wrap: " + Cut_Wrap + " | InsStat: " + InsStat + " | Ins_Cut_L_Shape: " + Ins_Cut_L_Shape
		Else
			Dim Con1 = Item.Connector[1].Value
			Dim Con2 = Item.Connector[2].Value
			If ((Contains(Con1, TDC) Or Contains(Con2, TDC)) And TDC_Cut_4_Piece = YES) Or ((Contains(Con1, TDF) Or Contains(Con2, TDF)) And TDC_Cut_4_Piece = YES) Or (Half_Periphery >= Cut_L) Then
				OverRideVal = "4xI,M-M,F-F"
			Else				
				OverRideVal = TwoXL
			EndIf
			REM Msg = "L: " + L + " | Periphery: " + Periphery + " | Cut_Wrap: " + Cut_Wrap + " | Con1: " + Con1 + " | Con2: " + Con2 + " | TDC_Cut_4_Piece: " + TDC_Cut_4_Piece + " | Half_Periphery: " + Half_Periphery + " | Cut_L: " + Cut_L
		EndIf
	EndIf
	
	If OverRideVal <> "" Then
		If Item.Option[OVERRIDE].Value <> OverRideVal Then
			Dim OrigVal = Item.Option[OVERRIDE].Value
			Item.Option[OVERRIDE].Value = OverRideVal
			Chng()
			WriteToLog("StraightType OverRideVal: " + OrigVal + " -> " + OverRideVal)
			REM WriteToLog(Msg)
		EndIf		
	EndIf
	
End Function