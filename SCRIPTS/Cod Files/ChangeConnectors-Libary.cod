REM ******************************************************************************
REM *       SCOPE: Change Connectors in Database Library                         *
REM * DESCRIPTION: Changes conectors from one to another in items folder.        *
REM *  PROPERTIES:                                                               *
REM *                                                                            *
REM *----------------------------------------------------------------------------*
REM *  CREATED BY: William Tucker                                                *
REM *      DIRECT:                                                               *
REM *        CELL:                                                               *
REM *       EMAIL:                                                               *
REM *        DATE:                                                               *
REM *  REVISED BY:                                                               *
REM *      DIRECT: (xxx) xxx-xxxx                                                *
REM *        CELL: (xxx) xxx-xxxx                                                *
REM *       EMAIL:                                                               *
REM *        DATE:                                                               *
REM ******************************************************************************


Rem------Change The Path
dim rootpath = mappath_items + "/Imperial Content/zMasters"
dim pathfrom = "items"

Rem-------Change the Connector Names
Dim OldCon = "*"
Dim NewCon = ""

REM *** DONT CHANGE ANYTHING AFTER THIS ***
requires task
dim cr = ascii(10)

function getrelativefrom( path, relativefrom )
  dim rellen=len(relativefrom)
  dim rel = instr(1, path, "\" + relativefrom + "\")
  if not rel then rel = instr(1, path, "/" + relativefrom + "/")
  dim rv
  if rel then
    rv = substring( path, rel+rellen+2, 0 )
  else
    rv = path
  endif

  return rv
endfunction

function UpdateItem ( path )
  rem scan for all items in the specified folder
  dim filescan as filelocator
  filescan.scan(path, "*.itm", true, false)
 
  dim folderscan as filelocator
  folderscan.scan(path, "*.*", false, true)
 
  dim lp, lp2

  dim progressfiles = (folderscan.foldercount = 0)
 
  if progressfiles then task.beginprogress(filescan.filecount)
 
  for lp=1 to filescan.filecount
 
    rem load the item
    dim item as itemstruct
 
    dim loadfile=filescan.file[lp]
    dim sf=getrelativefrom( path, pathfrom )
    sf=substring(sf,1,-1)
    sf=GetFilename(sf)

    rem show parent folder name and itm filename
    task.message = sf + cr + GetFilename( loadfile )
 
rem debug item.connector[1].value
    if item.load(loadfile) then
     if item.connectors > 0 then
      if item.connector[1].value = OldCon then
         item.connector[1].value = NewCon
      Endif
     Endif

 
     if item.connectors > 1 then
      if item.connector[2].value = OldCon then
         item.connector[2].value = NewCon
      Endif
     Endif

 
     if item.connectors > 2 then
      if item.connector[3].value = OldCon then
         item.connector[3].value = NewCon
      Endif
     Endif

 
     if item.connectors > 3 then
      if item.connector[4].value = OldCon then
         item.connector[4].value = NewCon
      Endif
     Endif

 
     if item.connectors > 4 then
      if item.connector[5].value = OldCon then
         item.connector[5].value = NewCon
      Endif
     Endif

 
     if item.connectors > 5 then
      if item.connector[6].value = OldCon then
         item.connector[6].value = NewCon
      Endif
     Endif
rem debug item.connector[1].value

  if item.save(loadfile) = 0 then error "unable to save file " + loadfile
      endif
 

    if task.aborted then
      lp=filescan.filecount
    endif
 
    if progressfiles then task.progress = task.progress + 1

  next lp

  if progressfiles then
    task.endprogress()
  else
    task.beginprogress( folderscan.foldercount )
  endif
 
  for lp=1 to folderscan.foldercount
 
    dim nextpath = folderscan.folder[lp]
 
    task.message = "Scanning " + cr + nextpath
 
    UpdateItem( nextpath )

    if task.aborted then
      lp=folderscan.foldercount
    endif

    if not progressfiles then task.progress = task.progress + 1
 
  next lp

  if not progressfiles then task.endprogress()
 
end function
 
 
 task.beginprogress( 1 )
 task.progress = 0
 UpdateItem( rootpath )
 task.endprogress()