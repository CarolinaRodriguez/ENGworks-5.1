
function debug_item(info="",doconns=true,doseams=true,dodims=true,dooptions=true,doother=true)

  rem ** display item breakdown - seams, conns, dims etc
  
  dim lp, cr=ascii(10)
  
  dim conns, seams, dims, options, material, service, spec
  
  if doconns then
    for lp=1 to item.connectors
      conns = conns + "C" + lp + ": " + item.connector[lp].value 
      if item.connector[lp].locked then conns = conns + " [X]"
      conns = conns + cr
    next
  endif
  if doseams then
    for lp=1 to item.seams
      seams = seams + "S" + lp + ": " + item.seam[lp].value
      if item.seam[lp].locked then seams = seams + " [X]"
      seams = seams + cr
    next
  endif
  if dodims then
    for lp=1 to item.dims
      if item.dim[lp].status<>"notused" then    
        dims = dims + item.dim[lp].Annotation + ": " + item.dim[lp].Name + " = " + item.dim[lp].value
        if item.dim[lp].numvalue <> item.dim[lp].value then 
          dims = dims + " (" + item.dim[lp].numvalue + ")"
        end if
        if item.dim[lp].locked then dims = dims + " [X]"
        dims = dims + " {" + item.dim[lp].status + "}"
        dims = dims + cr
      end if
    next
  endif
  if dooptions then
    for lp=1 to item.options
      if item.option[lp].status<>"hidden" then    
        options = options + lp + ": " + item.option[lp].Name + " = " + item.option[lp].value
        if item.option[lp].locked then options = options + " [X]"
        options = options + cr
      end if
    next
  endif
  if doother then
    material=item.Material + " x " + item.Gauge + cr
    service=item.service + cr
    spec=item.specification + cr
  endif

  dim all
  dim descr="Item " + item.Number + ", Cid " + item.cid + cr

  rem ** debug msg **
  if len(info)>0 then all = info + cr + cr
  
  rem ** item description **
  all = all + descr + cr
  
  rem ** mat/spec, seams, conns, dims etc **
  if doother   then all = all + "Material: " + material + "Spec: " + spec + "Service: " + service + cr  
  if doconns   then all = all + "Connectors: " + cr + conns + cr
  if doseams   then all = all + "Seams: " + cr + seams+ cr
  if dodims    then all = all + "Dims: " + cr + dims + cr
  if dooptions then all = all + "Options: " + cr + options + cr

  rem show debug msg
  debug all

end function

function getdimvalue(name1, name2="", err=true)

  rem Access dims by name (including alternative name) SAFELY

  dim rv=0.0
  dim done=false

  if len(name1)>0 and item.dim[name1] then
    rv=item.dim[name1].NumValue
    done=true
  elseif len(name2)>0 and item.dim[name2] then
    rv=item.dim[name2].NumValue
    done=true
  end if
    
  if not done and err=true then
    rem ERROR - dim not found ; show debug msg and list all dims
    dim errmsg ="Unable to Locate Dim '" + name1 + "'"
    if len(name2)>0 then
      errmsg = errmsg + " or '" + name2 + "']"
    endif
    debug_item(errmsg, false, false, true, false, false)
  end if

  return rv

end function

function testtaper()

  dim rv = true

  rem dim angle=item.dim["angle2"].Value /// UNSAFE bad ["value"] generates script error
  
  rem  ** no warning if angle not found ; assumed to be zero **
  dim angle=getdimvalue("angle", void, false)
  dim length=getdimvalue("length", "height")

  if angle>30 and length<1000 then
    error "Taper angle (" + angle + ">30) too big for length (" + length + "<1000)"
    rv=false
  end if

  return rv

end function

function testsegments()

  dim rv=true
  
  dim angle=getdimvalue("angle")
  dim segments=item.option["number of segments"].value
  
  if angle>45 and segments<3 then
    error "Too few segments (" + segments + "<3) for angle (" + angle + ">45)"
    rv=false
    
    rem ** fix it
    rem item.option["number of segments"].value = 3
    rem if not item.update() then debug "fail"
  end if
  
  return rv
  
end function

function testhard()

  dim rv=true
  dim width=getdimvalue("major axis", "depth")
  dim height=getdimvalue("minor axis", "width")

  dim ratio=width/height
  if ratio<1 then
    error "Oval Fitting is Hard (" + ratio + ")"
    rv=false
  end if

  return rv

end function

function readini( filename, section, data, defvalue="")

  dim found=false, value
  
  rem ** open ini file and seek for section
  
  Object ini=new file(filename, forinput+istext)
  if ini.isopen then
    if ini.seekline("["+section+"]") then
  
      rem ** section found ; locate data and get value [upto end of file or next section]

      dim nextsection=false
              
      while not found and not ini.eof and not nextsection
      
        dim line=ini.readline()
        
        if chr(line,1)="[" then
          nextsection=true
        else
          dim pos=instr(1, line, "=")
          
          if pos>0 then
          
            dim name = trim( left( line, pos-1 ) )
            if name = data then
              
              rem ** value is line from after '=' (pos+1) to end of string (0) ; trimmed
              value=trim( substring( line, pos+1, 0 ) )
              found = true
              
            endif
          endif
        endif
        
      endwhile
      
    endif
    ini.close()
  endif
  
  rem ** if value not found, use default value
  if not found then value = defvalue
    
  return value

endfunction
          
function writeini( filename, section, data, value )

  dim tempfile = filename + ".tmp"
  
  object in=new file( filename, forinput+istext )
  object out=new file( tempfile, foroutput+istext )
  
  dim done=false
  
  if in.isopen and out.isopen then
  
    rem ** read all of ini file, writing more or less an exact copy but with the data changed or inserted
    
    dim mysection=false
    dim gap=0
    
    while not in.eof
      
      dim inline = in.readline()
      dim outline = inline

      if len(inline)>0 then
    
        if chr(inline, 1)="[" then
        
          rem ** any section start
          
          if mysection then
          
            rem ** new section after the one we're after; append data to last section (any gaps not written yet)
            if not done then
              out.writeline( data + "=" + value )
              done = true
            endif
            mysection=false
            
          elseif inline = "["+section+"]" then 
          
            rem ** entering relevant section
            mysection=true
            
          endif
            
        else
        
          rem ** data line
          
          if mysection and not done then

            rem ** in correct section; check for correct data          
            dim pos=instr(1, inline, "=")
            if pos>0 then
              
              dim name=trim( left(inline, pos-1) )
              if name=data then
            
                rem ** found existing data ; modify the line we're writing out    
                outline = name + "=" + value
                done=true
              
              endif
            endif
          endif
          
        endif
        
        rem write out any gaps between or in sections  
        if gap>0 then
          dim glp
          for glp=1 to gap
            out.writeline("")
          next
        endif
        gap=0

        rem ** write out copied / modified text        
        out.writeline( outline )
        
      else
        rem ** inline was just a blank line; don't write it yet (may want to append more data 1st)
        gap = gap + 1
      endif
      
    endwhile
    
    if not done then
      if mysection then
        rem ** correct section was the last one but didnt contain data; append it
        out.writeline(data + "=" + value)
      else      
        rem ** read through the whole file and didnt find the section or data; append new section
        out.writeline("")
        out.writeline("["+section+"]")
        out.writeline(data + "=" + value)
      endif
      done=true
    endif
    
    rem ** TODO: write any blank lines left at end of file ? (gap>0)
    
    in.close()
    out.close()

    rem ** delete orignal file and rename new file to original name
    if not in.delete() or not out.rename(in.filename) then done=false
    
  endif
  
  return done
  
endfunction

function writetolog( logfilename, text )

  dim rv = false

  rem ** open log file and append text to end (without adding a cr)
    
  object logfile=new file(logfilename, forinput+foroutput+istext)
  if logfile.isopen then
  
    logfile.position = file_end
    if logfile.writeline( text, false )>0 then rv=true
    logfile.close()
    
  endif
  
  return rv
endfunction

function eraselog( logfilename )

  object wipelog=new file( logfilename )
  return wipelog.delete()

endfunction

dim debuglog=mappath_home+"debug.log"
eraselog( debuglog )
